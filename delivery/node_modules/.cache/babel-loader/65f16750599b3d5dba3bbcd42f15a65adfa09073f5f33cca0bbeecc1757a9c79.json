{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, withCtx as _withCtx, createElementBlock as _createElementBlock } from \"vue\";\nimport _imports_0 from './assets/logo.png';\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"img\", {\n  alt: \"Vue logo\",\n  src: _imports_0\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_HelloWorld = _resolveComponent(\"HelloWorld\");\n  const _component_GMapMarker = _resolveComponent(\"GMapMarker\");\n  const _component_GMapMap = _resolveComponent(\"GMapMap\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createVNode(_component_HelloWorld, {\n    msg: \"Welcome to Your Delivery App\"\n  }), _createVNode(_component_GMapMap, {\n    center: _ctx.center,\n    zoom: _ctx.zoomLevel,\n    \"map-type-id\": \"terrain\",\n    style: {\n      \"width\": \"100vw\",\n      \"height\": \"20rem\"\n    },\n    options: {\n      zoomControl: true,\n      mapTypeControl: true,\n      scaleControl: true,\n      streetViewControl: true,\n      rotateControl: true,\n      fullscreenControl: true\n    }\n  }, {\n    default: _withCtx(() => [_ctx.center.lat !== 0 && _ctx.center.lng !== 0 ? (_openBlock(), _createBlock(_component_GMapMarker, {\n      key: 0,\n      position: _ctx.center,\n      draggable: true,\n      clickable: true,\n      onDragend: _ctx.onMarkerDragEnd\n    }, null, 8 /* PROPS */, [\"position\", \"onDragend\"])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"center\", \"zoom\"])]);\n}","map":{"version":3,"names":["_imports_0","_createElementVNode","alt","src","_createElementBlock","_hoisted_1","_createVNode","_component_HelloWorld","msg","_component_GMapMap","center","_ctx","zoom","zoomLevel","style","options","lat","lng","_createBlock","_component_GMapMarker","position","draggable","clickable","onDragend","onMarkerDragEnd"],"sources":["/Users/nonnos/Desktop/projFinal/delivery/src/App.vue"],"sourcesContent":["<template>\n  <div>\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n  <HelloWorld msg=\"Welcome to Your Delivery App\"/>\n\n  <GMapMap\n      :center=\"center\"\n      :zoom=\"zoomLevel\"\n      map-type-id=\"terrain\"\n      style=\"width: 100vw; height: 20rem\"\n      :options=\"{\n        zoomControl: true,\n        mapTypeControl: true,\n        scaleControl: true,\n        streetViewControl: true,\n        rotateControl: true,\n        fullscreenControl: true\n      }\"\n    >\n    <GMapMarker\n        v-if=\"center.lat !== 0 && center.lng !== 0\"\n        :position=\"center\"\n        :draggable=\"true\"\n        :clickable=\"true\"\n        @dragend=\"onMarkerDragEnd\"\n      />\n  </GMapMap>\n\n</div>\n\n</template>\n\n<script>\nimport HelloWorld from './components/HelloWorld.vue'\nimport { ref, onMounted } from 'vue';\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld,\n  },\n\n\nsetup() {\n     // Initialize center using localStorage or default values\n     const center = ref({\n      lat: 0, // Default to 0 for latitude\n      lng: 0, // Default to 0 for longitude\n    });\n\n\n    const zoomLevel = ref(10);\n    const fetchUserLocation = () => {\n      if ('geolocation' in navigator) {\n        return new Promise((resolve, reject) => {\n          navigator.geolocation.getCurrentPosition(\n            (position) => {\n              const lat = position.coords.latitude;\n              const lng = position.coords.longitude;\n              const newCenter = { lat, lng };\n              zoomLevel.value = 20;\n             \n              resolve(newCenter);\n            },\n            (error) => {\n              reject(error);\n            }\n          );\n        });\n      } else {\n        console.error(\"Geolocation is not supported in this browser.\");\n        return null;\n      }\n    };\n\n    const saveLocationToLocalStorage = (location) => {\n\n      const locationJSON = JSON.stringify(location);\n\n      localStorage.setItem('pinLocation', locationJSON);\n      \n    };\n\n    const returnToExactLocation = () => {\n      fetchUserLocation()\n        .then((newCenter) => {\n          center.value = newCenter;\n         \n          // Save the updated location to Local Storage\n          saveLocationToLocalStorage(center.value);\n        })\n        .catch((error) => {\n          console.error(\"Error getting user location: \" + error.message);\n        });\n    };\n\n    onMounted(() => {\n      fetchUserLocation();\n      \n    });\n\n\n  },\n\n  \n\n\n\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":";OAEsBA,UAAuB;gCAA3CC,mBAAA,CAA4C;EAAvCC,GAAG,EAAC,UAAU;EAACC,GAAuB,EAAvBH;;;;;;;uBADpBI,mBAAA,CA2BI,cA1BJC,UAA4C,EAC5CC,YAAA,CAAgDC,qBAAA;IAApCC,GAAG,EAAC;EAA8B,IAE9CF,YAAA,CAqBUG,kBAAA;IApBLC,MAAM,EAAEC,IAAA,CAAAD,MAAM;IACdE,IAAI,EAAED,IAAA,CAAAE,SAAS;IAChB,aAAW,EAAC,SAAS;IACrBC,KAAmC,EAAnC;MAAA;MAAA;IAAA,CAAmC;IAClCC,OAAO,EAAE;;;;;;;;;sBASZ,MAMI,CALMJ,IAAA,CAAAD,MAAM,CAACM,GAAG,UAAUL,IAAA,CAAAD,MAAM,CAACO,GAAG,U,cADxCC,YAAA,CAMIC,qBAAA;;MAJCC,QAAQ,EAAET,IAAA,CAAAD,MAAM;MAChBW,SAAS,EAAE,IAAI;MACfC,SAAS,EAAE,IAAI;MACfC,SAAO,EAAEZ,IAAA,CAAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}