{"ast":null,"code":"import HelloWorld from './components/HelloWorld.vue';\nimport { ref, onMounted } from 'vue';\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld\n  },\n  setup() {\n    // Initialize center using localStorage or default values\n    const center = ref({\n      lat: 0,\n      // Default to 0 for latitude\n      lng: 0 // Default to 0 for longitude\n    });\n\n    const zoomLevel = ref(10);\n    const loadGoogleMapsAPI = () => {\n      return new Promise((resolve, reject) => {\n        if (window.google) {\n          resolve();\n        } else {\n          const script = document.createElement('script');\n          script.src = `https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places`;\n          script.defer = true;\n          script.async = true;\n          script.onload = resolve;\n          script.onerror = reject;\n          document.head.appendChild(script);\n        }\n      });\n    };\n    const fetchUserLocation = () => {\n      if ('geolocation' in navigator) {\n        return new Promise((resolve, reject) => {\n          navigator.geolocation.getCurrentPosition(position => {\n            const lat = position.coords.latitude;\n            const lng = position.coords.longitude;\n            const newCenter = {\n              lat,\n              lng\n            };\n            zoomLevel.value = 20;\n            resolve(newCenter);\n          }, error => {\n            reject(error);\n          });\n        });\n      } else {\n        console.error(\"Geolocation is not supported in this browser.\");\n        return null;\n      }\n    };\n    const onMarkerDragEnd = event => {\n      const newLocation = event.latLng;\n      center.value = newLocation;\n      saveLocationToLocalStorage(newLocation);\n    };\n    const saveLocationToLocalStorage = location => {\n      const locationJSON = JSON.stringify(location);\n      localStorage.setItem('pinLocation', locationJSON);\n    };\n    const returnToExactLocation = () => {\n      fetchUserLocation().then(newCenter => {\n        center.value = newCenter;\n        saveLocationToLocalStorage(center.value);\n      }).catch(error => {\n        console.error(\"Error getting user location: \" + error.message);\n      });\n    };\n    const onDesiredLocationChange = () => {\n      // Use the Google Places Autocomplete service to search for locations\n      const input = this.$refs.locationInput;\n      loadGoogleMapsAPI().then(() => {\n        const options = {\n          types: ['geocode']\n        };\n        const autocomplete = new google.maps.places.Autocomplete(input, options);\n        autocomplete.addListener('place_changed', () => {\n          const place = autocomplete.getPlace();\n          if (place.geometry && place.geometry.location) {\n            center.value = {\n              lat: place.geometry.location.lat(),\n              lng: place.geometry.location.lng()\n            };\n          }\n        });\n      });\n    };\n    onMounted(() => {\n      fetchUserLocation();\n    });\n    return {\n      center,\n      zoomLevel,\n      returnToExactLocation,\n      onMarkerDragEnd,\n      onDesiredLocationChange\n    };\n  }\n};","map":{"version":3,"names":["HelloWorld","ref","onMounted","name","components","setup","center","lat","lng","zoomLevel","loadGoogleMapsAPI","Promise","resolve","reject","window","google","script","document","createElement","src","defer","async","onload","onerror","head","appendChild","fetchUserLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","newCenter","value","error","console","onMarkerDragEnd","event","newLocation","latLng","saveLocationToLocalStorage","location","locationJSON","JSON","stringify","localStorage","setItem","returnToExactLocation","then","catch","message","onDesiredLocationChange","input","$refs","locationInput","options","types","autocomplete","maps","places","Autocomplete","addListener","place","getPlace","geometry"],"sources":["/Users/nonnos/Desktop/projFinal/delivery/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n    <HelloWorld msg=\"Welcome to Your Delivery App\" />\n\n    <div class=\"map-container\">\n      <GMapMap\n        :center=\"center\"\n        :zoom=\"zoomLevel\"\n        map-type-id=\"terrain\"\n        style=\"width: 100%; height: 20rem;\"\n        :options=\"{\n          zoomControl: true,\n          mapTypeControl: true,\n          scaleControl: true,\n          streetViewControl: true,\n          rotateControl: true,\n          fullscreenControl: true\n        }\"\n      >\n        <GMapMarker\n          v-if=\"center.lat !== 0 && center.lng !== 0\"\n          :position=\"center\"\n          :draggable=\"true\"\n          :clickable=\"true\"\n          @dragend=\"onMarkerDragEnd\"\n        />\n      </GMapMap>\n    </div>\n\n    <div class=\"search-container\">\n      <!-- Desired Location Input -->\n      <input\n        ref=\"locationInput\"\n        class=\"form-control\"\n        type=\"text\"\n        placeholder=\"Search for a location\"\n        @input=\"onDesiredLocationChange\"\n      />\n    </div>\n\n    <div class=\"button-container\">\n      <button @click=\"returnToExactLocation\" class=\"btn btn-primary\">\n        Return to Exact Location\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport HelloWorld from './components/HelloWorld.vue';\nimport { ref, onMounted } from 'vue';\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld,\n  },\n\n  setup() {\n    // Initialize center using localStorage or default values\n    const center = ref({\n      lat: 0, // Default to 0 for latitude\n      lng: 0, // Default to 0 for longitude\n    });\n\n    const zoomLevel = ref(10);\n\n    const loadGoogleMapsAPI = () => {\n      return new Promise((resolve, reject) => {\n        if (window.google) {\n          resolve();\n        } else {\n          const script = document.createElement('script');\n          script.src = `https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places`;\n          script.defer = true;\n          script.async = true;\n\n          script.onload = resolve;\n          script.onerror = reject;\n\n          document.head.appendChild(script);\n        }\n      });\n    };\n\n    const fetchUserLocation = () => {\n      if ('geolocation' in navigator) {\n        return new Promise((resolve, reject) => {\n          navigator.geolocation.getCurrentPosition(\n            (position) => {\n              const lat = position.coords.latitude;\n              const lng = position.coords.longitude;\n              const newCenter = { lat, lng };\n              zoomLevel.value = 20;\n              resolve(newCenter);\n            },\n            (error) => {\n              reject(error);\n            }\n          );\n        });\n      } else {\n        console.error(\"Geolocation is not supported in this browser.\");\n        return null;\n      }\n    };\n\n    const onMarkerDragEnd = (event) => {\n      const newLocation = event.latLng;\n      center.value = newLocation;\n      saveLocationToLocalStorage(newLocation);\n    };\n\n    const saveLocationToLocalStorage = (location) => {\n      const locationJSON = JSON.stringify(location);\n      localStorage.setItem('pinLocation', locationJSON);\n    };\n\n    const returnToExactLocation = () => {\n      fetchUserLocation()\n        .then((newCenter) => {\n          center.value = newCenter;\n          saveLocationToLocalStorage(center.value);\n        })\n        .catch((error) => {\n          console.error(\"Error getting user location: \" + error.message);\n        });\n    };\n\n    const onDesiredLocationChange = () => {\n      // Use the Google Places Autocomplete service to search for locations\n      const input = this.$refs.locationInput;\n      loadGoogleMapsAPI().then(() => {\n        const options = {\n          types: ['geocode'],\n        };\n        const autocomplete = new google.maps.places.Autocomplete(input, options);\n\n        autocomplete.addListener('place_changed', () => {\n          const place = autocomplete.getPlace();\n          if (place.geometry && place.geometry.location) {\n            center.value = {\n              lat: place.geometry.location.lat(),\n              lng: place.geometry.location.lng(),\n            };\n          }\n        });\n      });\n    };\n\n    onMounted(() => {\n      fetchUserLocation();\n    });\n\n    return {\n      center,\n      zoomLevel,\n      returnToExactLocation,\n      onMarkerDragEnd,\n      onDesiredLocationChange,\n    };\n  },\n};\n</script>\n\n<style scoped>\n.map-container {\n  width: 100%;\n  height: 20rem;\n}\n\n.search-container {\n  margin: 10px;\n}\n\n.button-container {\n  text-align: center;\n  margin: 10px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}