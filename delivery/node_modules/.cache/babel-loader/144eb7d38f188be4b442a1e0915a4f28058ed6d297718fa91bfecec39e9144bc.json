{"ast":null,"code":"import HelloWorld from './components/HelloWorld.vue';\nimport { ref, onMounted } from 'vue';\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld\n  },\n  setup() {\n    // Initialize center using localStorage or default values\n    const center = ref({\n      lat: 0,\n      // Default to 0 for latitude\n      lng: 0 // Default to 0 for longitude\n    });\n\n    const zoomLevel = ref(10);\n    const fetchUserLocation = () => {\n      if ('geolocation' in navigator) {\n        return new Promise((resolve, reject) => {\n          navigator.geolocation.getCurrentPosition(position => {\n            const lat = position.coords.latitude;\n            const lng = position.coords.longitude;\n            const newCenter = {\n              lat,\n              lng\n            };\n            zoomLevel.value = 20;\n            resolve(newCenter);\n          }, error => {\n            reject(error);\n          });\n        });\n      } else {\n        console.error(\"Geolocation is not supported in this browser.\");\n        return null;\n      }\n    };\n    const returnToExactLocation = () => {\n      fetchUserLocation().then(newCenter => {\n        center.value = newCenter;\n\n        // Save the updated location to Local Storage\n        saveLocationToLocalStorage(center.value);\n      }).catch(error => {\n        console.error(\"Error getting user location: \" + error.message);\n      });\n    };\n    onMounted(() => {\n      fetchUserLocation();\n    });\n  }\n};","map":{"version":3,"names":["HelloWorld","ref","onMounted","name","components","setup","center","lat","lng","zoomLevel","fetchUserLocation","navigator","Promise","resolve","reject","geolocation","getCurrentPosition","position","coords","latitude","longitude","newCenter","value","error","console","returnToExactLocation","then","saveLocationToLocalStorage","catch","message"],"sources":["/Users/nonnos/Desktop/projFinal/delivery/src/App.vue"],"sourcesContent":["<template>\n  <div>\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n  <HelloWorld msg=\"Welcome to Your Delivery App\"/>\n\n  <GMapMap\n      :center=\"center\"\n      :zoom=\"zoomLevel\"\n      map-type-id=\"terrain\"\n      style=\"width: 100vw; height: 20rem\"\n      :options=\"{\n        zoomControl: true,\n        mapTypeControl: true,\n        scaleControl: true,\n        streetViewControl: true,\n        rotateControl: true,\n        fullscreenControl: true\n      }\"\n    >\n    <GMapMarker\n        v-if=\"center.lat !== 0 && center.lng !== 0\"\n        :position=\"center\"\n        :draggable=\"true\"\n        :clickable=\"true\"\n        @dragend=\"onMarkerDragEnd\"\n      />\n  </GMapMap>\n\n</div>\n\n</template>\n\n<script>\nimport HelloWorld from './components/HelloWorld.vue'\nimport { ref, onMounted } from 'vue';\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld,\n  },\n\n\nsetup() {\n     // Initialize center using localStorage or default values\n     const center = ref({\n      lat: 0, // Default to 0 for latitude\n      lng: 0, // Default to 0 for longitude\n    });\n\n\n    const zoomLevel = ref(10);\n    const fetchUserLocation = () => {\n      if ('geolocation' in navigator) {\n        return new Promise((resolve, reject) => {\n          navigator.geolocation.getCurrentPosition(\n            (position) => {\n              const lat = position.coords.latitude;\n              const lng = position.coords.longitude;\n              const newCenter = { lat, lng };\n              zoomLevel.value = 20;\n             \n              resolve(newCenter);\n            },\n            (error) => {\n              reject(error);\n            }\n          );\n        });\n      } else {\n        console.error(\"Geolocation is not supported in this browser.\");\n        return null;\n      }\n    };\n\n    const returnToExactLocation = () => {\n      fetchUserLocation()\n        .then((newCenter) => {\n          center.value = newCenter;\n         \n          // Save the updated location to Local Storage\n          saveLocationToLocalStorage(center.value);\n        })\n        .catch((error) => {\n          console.error(\"Error getting user location: \" + error.message);\n        });\n    };\n\n    onMounted(() => {\n      fetchUserLocation();\n      \n    });\n\n\n  },\n\n  \n\n\n\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":"AAiCA,OAAOA,UAAS,MAAO,6BAA4B;AACnD,SAASC,GAAG,EAAEC,SAAQ,QAAS,KAAK;AAEpC,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVJ;EACF,CAAC;EAGHK,KAAKA,CAAA,EAAG;IACH;IACA,MAAMC,MAAK,GAAIL,GAAG,CAAC;MAClBM,GAAG,EAAE,CAAC;MAAE;MACRC,GAAG,EAAE,CAAC,CAAE;IACV,CAAC,CAAC;;IAGF,MAAMC,SAAQ,GAAIR,GAAG,CAAC,EAAE,CAAC;IACzB,MAAMS,iBAAgB,GAAIA,CAAA,KAAM;MAC9B,IAAI,aAAY,IAAKC,SAAS,EAAE;QAC9B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;UACtCH,SAAS,CAACI,WAAW,CAACC,kBAAkB,CACrCC,QAAQ,IAAK;YACZ,MAAMV,GAAE,GAAIU,QAAQ,CAACC,MAAM,CAACC,QAAQ;YACpC,MAAMX,GAAE,GAAIS,QAAQ,CAACC,MAAM,CAACE,SAAS;YACrC,MAAMC,SAAQ,GAAI;cAAEd,GAAG;cAAEC;YAAI,CAAC;YAC9BC,SAAS,CAACa,KAAI,GAAI,EAAE;YAEpBT,OAAO,CAACQ,SAAS,CAAC;UACpB,CAAC,EACAE,KAAK,IAAK;YACTT,MAAM,CAACS,KAAK,CAAC;UACf,CACF,CAAC;QACH,CAAC,CAAC;MACJ,OAAO;QACLC,OAAO,CAACD,KAAK,CAAC,+CAA+C,CAAC;QAC9D,OAAO,IAAI;MACb;IACF,CAAC;IAED,MAAME,qBAAoB,GAAIA,CAAA,KAAM;MAClCf,iBAAiB,CAAC,EACfgB,IAAI,CAAEL,SAAS,IAAK;QACnBf,MAAM,CAACgB,KAAI,GAAID,SAAS;;QAExB;QACAM,0BAA0B,CAACrB,MAAM,CAACgB,KAAK,CAAC;MAC1C,CAAC,EACAM,KAAK,CAAEL,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,+BAA8B,GAAIA,KAAK,CAACM,OAAO,CAAC;MAChE,CAAC,CAAC;IACN,CAAC;IAED3B,SAAS,CAAC,MAAM;MACdQ,iBAAiB,CAAC,CAAC;IAErB,CAAC,CAAC;EAGJ;AAMF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}