{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, withCtx as _withCtx, createVNode as _createVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"nav\", {\n  class: \"navbar navbar-expand-lg navbar-light bg-light\"\n}, [/*#__PURE__*/_createElementVNode(\"a\", {\n  class: \"navbar-brand\",\n  href: \"#\"\n}, \"Your Delivery App\")], -1 /* HOISTED */);\nconst _hoisted_2 = {\n  class: \"container mt-4\"\n};\nconst _hoisted_3 = {\n  class: \"row\"\n};\nconst _hoisted_4 = {\n  class: \"col-md-12 col-lg-6 mb-4\"\n};\nconst _hoisted_5 = {\n  class: \"card\"\n};\nconst _hoisted_6 = {\n  class: \"card-body\"\n};\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"h5\", {\n  class: \"card-title\"\n}, \"Delivery Map\", -1 /* HOISTED */);\nconst _hoisted_8 = {\n  class: \"col-md-12 col-lg-6 mb-4\"\n};\nconst _hoisted_9 = {\n  class: \"card\"\n};\nconst _hoisted_10 = {\n  class: \"card-body\"\n};\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"h5\", {\n  class: \"card-title\"\n}, \"Additional Information\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_GMapMarker = _resolveComponent(\"GMapMarker\");\n  const _component_GMapMap = _resolveComponent(\"GMapMap\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" Navbar \"), _hoisted_1, _createCommentVNode(\" Main Content Container \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" Map Section \"), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_hoisted_7, _createVNode(_component_GMapMap, {\n    center: $setup.center,\n    zoom: $setup.zoomLevel,\n    \"map-type-id\": \"terrain\",\n    style: {\n      \"width\": \"100%\",\n      \"height\": \"20rem\"\n    }\n  }, {\n    default: _withCtx(() => [$setup.center.lat !== 0 && $setup.center.lng !== 0 ? (_openBlock(), _createBlock(_component_GMapMarker, {\n      key: 0,\n      position: $setup.center,\n      draggable: true,\n      clickable: true,\n      onDragend: $setup.onMarkerDragEnd\n    }, null, 8 /* PROPS */, [\"position\", \"onDragend\"])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"center\", \"zoom\"])])])]), _createCommentVNode(\" Additional Information Section \"), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", _hoisted_10, [_hoisted_11, _createCommentVNode(\" Other content goes here, e.g., form elements, details, etc. \"), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.returnToExactLocation && $setup.returnToExactLocation(...args)),\n    class: \"btn btn-primary\"\n  }, \" Return to Exact Location \")])])])])])]);\n}","map":{"version":3,"names":["_createElementVNode","class","href","_createElementBlock","_createCommentVNode","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_createVNode","_component_GMapMap","center","$setup","zoom","zoomLevel","style","lat","lng","_createBlock","_component_GMapMarker","position","draggable","clickable","onDragend","onMarkerDragEnd","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","onClick","_cache","args","returnToExactLocation"],"sources":["/Users/nonnos/Desktop/projFinal/delivery/src/App.vue"],"sourcesContent":["<!-- <template>\n  <div>\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n  <HelloWorld msg=\"Welcome to Your Delivery App\"/>\n\n  <GMapMap\n      :center=\"center\"\n      :zoom=\"zoomLevel\"\n      map-type-id=\"terrain\"\n      style=\"width: 100vw; height: 20rem\"\n      :options=\"{\n        zoomControl: true,\n        mapTypeControl: true,\n        scaleControl: true,\n        streetViewControl: true,\n        rotateControl: true,\n        fullscreenControl: true\n      }\"\n    >\n    <GMapMarker\n        v-if=\"center.lat !== 0 && center.lng !== 0\"\n        :position=\"center\"\n        :draggable=\"true\"\n        :clickable=\"true\"\n        @dragend=\"onMarkerDragEnd\"\n      />\n\n      <button @click=\"returnToExactLocation\">Return to Exact Location</button>\n  </GMapMap>\n\n</div>\n\n</template>\n\n<script>\nimport HelloWorld from './components/HelloWorld.vue'\nimport { ref, onMounted } from 'vue';\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld,\n  },\n\n\nsetup() {\n     // Initialize center using localStorage or default values\n     const center = ref({\n      lat: 0, // Default to 0 for latitude\n      lng: 0, // Default to 0 for longitude\n    });\n\n\n    const zoomLevel = ref(10);\n    const fetchUserLocation = () => {\n      if ('geolocation' in navigator) {\n        return new Promise((resolve, reject) => {\n          navigator.geolocation.getCurrentPosition(\n            (position) => {\n              const lat = position.coords.latitude;\n              const lng = position.coords.longitude;\n              const newCenter = { lat, lng };\n              zoomLevel.value = 20;\n             \n              resolve(newCenter);\n            },\n            (error) => {\n              reject(error);\n            }\n          );\n        });\n      } else {\n        console.error(\"Geolocation is not supported in this browser.\");\n        return null;\n      }\n    };\n\n    const onMarkerDragEnd = (event) => {\n      const newLocation = event.latLng;\n      center.value = newLocation;\n\n      // Save the new location to Local Storage\n      saveLocationToLocalStorage(newLocation);\n    };\n\n    const saveLocationToLocalStorage = (location) => {\n\n      const locationJSON = JSON.stringify(location);\n\n      localStorage.setItem('pinLocation', locationJSON);\n      \n    };\n\n    const returnToExactLocation = () => {\n      fetchUserLocation()\n        .then((newCenter) => {\n          center.value = newCenter;\n         \n          // Save the updated location to Local Storage\n          saveLocationToLocalStorage(center.value);\n        })\n        .catch((error) => {\n          console.error(\"Error getting user location: \" + error.message);\n        });\n    };\n\n    onMounted(() => {\n      fetchUserLocation();\n      \n    });\n    const onDesiredLocationChange = (place) => {\n      if (place.geometry && place.geometry.location) {\n        center.value = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        };\n      }\n    };\n\n    // Function to handle current location change\n    const onCurrentLocationChange = (place) => {\n      if (place.geometry && place.geometry.location) {\n        center.value = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        };\n      }\n    };\n\n\n\n    return {\n      center,\n      zoomLevel,\n      returnToExactLocation,\n      onMarkerDragEnd,\n      onDesiredLocationChange,\n      onCurrentLocationChange,\n    };\n\n\n  },\n\n  \n\n\n\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style> -->\n\n\n<template>\n  <div>\n    <!-- Navbar -->\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a class=\"navbar-brand\" href=\"#\">Your Delivery App</a>\n    </nav>\n\n    <!-- Main Content Container -->\n    <div class=\"container mt-4\">\n      <div class=\"row\">\n        <!-- Map Section -->\n        <div class=\"col-md-12 col-lg-6 mb-4\">\n          <div class=\"card\">\n            <div class=\"card-body\">\n              <h5 class=\"card-title\">Delivery Map</h5>\n              <GMapMap\n                :center=\"center\"\n                :zoom=\"zoomLevel\"\n                map-type-id=\"terrain\"\n                style=\"width: 100%; height: 20rem\"\n              >\n                <GMapMarker\n                  v-if=\"center.lat !== 0 && center.lng !== 0\"\n                  :position=\"center\"\n                  :draggable=\"true\"\n                  :clickable=\"true\"\n                  @dragend=\"onMarkerDragEnd\"\n                />\n              </GMapMap>\n            </div>\n          </div>\n        </div>\n\n        <!-- Additional Information Section -->\n        <div class=\"col-md-12 col-lg-6 mb-4\">\n          <div class=\"card\">\n            <div class=\"card-body\">\n              <h5 class=\"card-title\">Additional Information</h5>\n              <!-- Other content goes here, e.g., form elements, details, etc. -->\n              <button @click=\"returnToExactLocation\" class=\"btn btn-primary\">\n                Return to Exact Location\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\n\nexport default {\n  name: 'App',\n\n  \nsetup() {\n     // Initialize center using localStorage or default values\n     const center = ref({\n      lat: 0, // Default to 0 for latitude\n      lng: 0, // Default to 0 for longitude\n    });\n\n\n    const zoomLevel = ref(10);\n    const fetchUserLocation = () => {\n      if ('geolocation' in navigator) {\n        return new Promise((resolve, reject) => {\n          navigator.geolocation.getCurrentPosition(\n            (position) => {\n              const lat = position.coords.latitude;\n              const lng = position.coords.longitude;\n              const newCenter = { lat, lng };\n              zoomLevel.value = 20;\n             \n              resolve(newCenter);\n            },\n            (error) => {\n              reject(error);\n            }\n          );\n        });\n      } else {\n        console.error(\"Geolocation is not supported in this browser.\");\n        return null;\n      }\n    };\n\n    const onMarkerDragEnd = (event) => {\n      const newLocation = event.latLng;\n      center.value = newLocation;\n\n      // Save the new location to Local Storage\n      saveLocationToLocalStorage(newLocation);\n    };\n\n    const saveLocationToLocalStorage = (location) => {\n\n      const locationJSON = JSON.stringify(location);\n\n      localStorage.setItem('pinLocation', locationJSON);\n      \n    };\n\n    const returnToExactLocation = () => {\n      fetchUserLocation()\n        .then((newCenter) => {\n          center.value = newCenter;\n         \n          // Save the updated location to Local Storage\n          saveLocationToLocalStorage(center.value);\n        })\n        .catch((error) => {\n          console.error(\"Error getting user location: \" + error.message);\n        });\n    };\n\n    onMounted(() => {\n      fetchUserLocation();\n      \n    });\n    const onDesiredLocationChange = (place) => {\n      if (place.geometry && place.geometry.location) {\n        center.value = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        };\n      }\n    };\n\n    // Function to handle current location change\n    const onCurrentLocationChange = (place) => {\n      if (place.geometry && place.geometry.location) {\n        center.value = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        };\n      }\n    };\n\n\n\n    return {\n      center,\n      zoomLevel,\n      returnToExactLocation,\n      onMarkerDragEnd,\n      onDesiredLocationChange,\n      onCurrentLocationChange,\n    };\n\n\n  },\n\n  \n\n\n\n};\n</script>\n"],"mappings":";gCAqKIA,mBAAA,CAEM;EAFDC,KAAK,EAAC;AAA+C,I,aACxDD,mBAAA,CAAsD;EAAnDC,KAAK,EAAC,cAAc;EAACC,IAAI,EAAC;GAAI,mBAAiB,E;;EAI/CD,KAAK,EAAC;AAAgB;;EACpBA,KAAK,EAAC;AAAK;;EAETA,KAAK,EAAC;AAAyB;;EAC7BA,KAAK,EAAC;AAAM;;EACVA,KAAK,EAAC;AAAW;gCACpBD,mBAAA,CAAwC;EAApCC,KAAK,EAAC;AAAY,GAAC,cAAY;;EAoBpCA,KAAK,EAAC;AAAyB;;EAC7BA,KAAK,EAAC;AAAM;;EACVA,KAAK,EAAC;AAAW;iCACpBD,mBAAA,CAAkD;EAA9CC,KAAK,EAAC;AAAY,GAAC,wBAAsB;;;;;uBApCzDE,mBAAA,CA8CM,cA7CJC,mBAAA,YAAe,EACfC,UAEM,EAEND,mBAAA,4BAA+B,EAC/BJ,mBAAA,CAsCM,OAtCNM,UAsCM,GArCJN,mBAAA,CAoCM,OApCNO,UAoCM,GAnCJH,mBAAA,iBAAoB,EACpBJ,mBAAA,CAoBM,OApBNQ,UAoBM,GAnBJR,mBAAA,CAkBM,OAlBNS,UAkBM,GAjBJT,mBAAA,CAgBM,OAhBNU,UAgBM,GAfJC,UAAwC,EACxCC,YAAA,CAaUC,kBAAA;IAZPC,MAAM,EAAEC,MAAA,CAAAD,MAAM;IACdE,IAAI,EAAED,MAAA,CAAAE,SAAS;IAChB,aAAW,EAAC,SAAS;IACrBC,KAAkC,EAAlC;MAAA;MAAA;IAAA;;sBAEA,MAME,CALMH,MAAA,CAAAD,MAAM,CAACK,GAAG,UAAUJ,MAAA,CAAAD,MAAM,CAACM,GAAG,U,cADtCC,YAAA,CAMEC,qBAAA;;MAJCC,QAAQ,EAAER,MAAA,CAAAD,MAAM;MAChBU,SAAS,EAAE,IAAI;MACfC,SAAS,EAAE,IAAI;MACfC,SAAO,EAAEX,MAAA,CAAAY;;;+CAOpBvB,mBAAA,oCAAuC,EACvCJ,mBAAA,CAUM,OAVN4B,UAUM,GATJ5B,mBAAA,CAQM,OARN6B,UAQM,GAPJ7B,mBAAA,CAMM,OANN8B,WAMM,GALJC,WAAkD,EAClD3B,mBAAA,iEAAoE,EACpEJ,mBAAA,CAES;IAFAgC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEnB,MAAA,CAAAoB,qBAAA,IAAApB,MAAA,CAAAoB,qBAAA,IAAAD,IAAA,CAAqB;IAAEjC,KAAK,EAAC;KAAkB,4BAE/D,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}