{"ast":null,"code":"import HelloWorld from './components/HelloWorld.vue';\nimport { ref, onMounted } from 'vue';\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld\n  },\n  methods: {\n    loadGoogleMapsAPI() {\n      return new Promise((resolve, reject) => {\n        if (window.google) {\n          // If 'google' object is already available, resolve the promise.\n          resolve();\n        } else {\n          // Create a <script> element to load the Google Maps API.\n          const script = document.createElement('script');\n          script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyAFp165fHH3fpXVJpV5eKV059_Ok95PLJg&libraries=places`;\n          script.defer = true;\n          script.async = true;\n\n          // Set up a callback function to resolve the promise when the script is loaded.\n          script.onload = resolve;\n          script.onerror = reject;\n\n          // Append the script to the document.\n          document.head.appendChild(script);\n        }\n      });\n    },\n    onMounted() {\n      this.loadGoogleMapsAPI().then(() => {\n        // The Google Maps API is loaded, and the 'google' object is now available.\n        // You can access 'google' and initialize your map or perform other actions here.\n\n        // Now you can fetch the user's location or perform other actions that depend on the Google Maps API.\n        fetchUserLocation();\n      }).catch(error => {\n        console.error('Error loading Google Maps API:', error);\n      });\n    }\n  },\n  setup() {\n    // Initialize center using localStorage or default values\n    const center = ref({\n      lat: 0,\n      // Default to 0 for latitude\n      lng: 0 // Default to 0 for longitude\n    });\n\n    const desiredLocation = ref('');\n    const currentLocation = ref('');\n    const zoomLevel = ref(10);\n    const fetchUserLocation = () => {\n      if ('geolocation' in navigator) {\n        return new Promise((resolve, reject) => {\n          navigator.geolocation.getCurrentPosition(position => {\n            const lat = position.coords.latitude;\n            const lng = position.coords.longitude;\n            const newCenter = {\n              lat,\n              lng\n            };\n            zoomLevel.value = 20;\n            resolve(newCenter);\n          }, error => {\n            reject(error);\n          });\n        });\n      } else {\n        console.error(\"Geolocation is not supported in this browser.\");\n        return null;\n      }\n    };\n    const onMarkerDragEnd = event => {\n      const newLocation = event.latLng;\n      center.value = newLocation;\n\n      // Save the new location to Local Storage\n      saveLocationToLocalStorage(newLocation);\n    };\n    const saveLocationToLocalStorage = location => {\n      const locationJSON = JSON.stringify(location);\n      localStorage.setItem('pinLocation', locationJSON);\n    };\n    const returnToExactLocation = () => {\n      fetchUserLocation().then(newCenter => {\n        center.value = newCenter;\n\n        // Save the updated location to Local Storage\n        saveLocationToLocalStorage(center.value);\n      }).catch(error => {\n        console.error(\"Error getting user location: \" + error.message);\n      });\n    };\n\n    // onMounted(() => {\n    //   fetchUserLocation();\n\n    // });\n\n    // const onDesiredLocationChange = (place) => {\n    //   if (place.geometry && place.geometry.location) {\n    //     center.value = {\n    //       lat: place.geometry.location.lat(),\n    //       lng: place.geometry.location.lng(),\n    //     };\n    //   }\n    // };\n    const onDesiredLocationChange = () => {\n      // Use the Google Places Autocomplete service to search for locations\n      const input = this.$refs.locationInput;\n      const options = {\n        types: ['geocode']\n      };\n      const autocomplete = new google.maps.places.Autocomplete(input, options);\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        if (place.geometry && place.geometry.location) {\n          center.value = {\n            lat: place.geometry.location.lat(),\n            lng: place.geometry.location.lng()\n          };\n        }\n      });\n    };\n\n    // Function to handle current location change\n    const onCurrentLocationChange = place => {\n      if (place.geometry && place.geometry.location) {\n        center.value = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng()\n        };\n      }\n    };\n    return {\n      center,\n      zoomLevel,\n      returnToExactLocation,\n      onMarkerDragEnd,\n      onDesiredLocationChange,\n      desiredLocation,\n      currentLocation,\n      onCurrentLocationChange\n    };\n  }\n};","map":{"version":3,"names":["HelloWorld","ref","onMounted","name","components","methods","loadGoogleMapsAPI","Promise","resolve","reject","window","google","script","document","createElement","src","defer","async","onload","onerror","head","appendChild","then","fetchUserLocation","catch","error","console","setup","center","lat","lng","desiredLocation","currentLocation","zoomLevel","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","newCenter","value","onMarkerDragEnd","event","newLocation","latLng","saveLocationToLocalStorage","location","locationJSON","JSON","stringify","localStorage","setItem","returnToExactLocation","message","onDesiredLocationChange","input","$refs","locationInput","options","types","autocomplete","maps","places","Autocomplete","addListener","place","getPlace","geometry","onCurrentLocationChange"],"sources":["/Users/nonnos/Desktop/projFinal/delivery/src/App.vue"],"sourcesContent":["<template>\n  <div>\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n  <HelloWorld msg=\"Welcome to Your Delivery App\"/>\n\n  <GMapMap\n      :center=\"center\"\n      :zoom=\"zoomLevel\"\n      map-type-id=\"terrain\"\n      style=\"width: 100vw; height: 20rem; margin-top: 10px; margin-bottom: 10px; margin-left: 10px; margin-right: 10px;\"\n      :options=\"{\n        zoomControl: true,\n        mapTypeControl: true,\n        scaleControl: true,\n        streetViewControl: true,\n        rotateControl: true,\n        fullscreenControl: true\n      }\"\n    >\n    <GMapMarker\n        v-if=\"center.lat !== 0 && center.lng !== 0\"\n        :position=\"center\"\n        :draggable=\"true\"\n        :clickable=\"true\"\n        @dragend=\"onMarkerDragEnd\"\n      />\n\n      <button @click=\"returnToExactLocation\" class=\"btn btn-primary\">\n                Return to Exact Location\n              </button>\n\n                <!-- Desired Location Input -->\n                <input\n      ref=\"locationInput\"\n      type=\"text\"\n      placeholder=\"Search for a location\"\n      @input=\"onDesiredLocationChange\"\n    />\n  </GMapMap>\n\n</div>\n\n</template>\n\n<script>\nimport HelloWorld from './components/HelloWorld.vue'\nimport { ref, onMounted } from 'vue';\n\n\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld,\n  },\n\n  methods: {\n  loadGoogleMapsAPI() {\n    return new Promise((resolve, reject) => {\n      if (window.google) {\n        // If 'google' object is already available, resolve the promise.\n        resolve();\n      } else {\n        // Create a <script> element to load the Google Maps API.\n        const script = document.createElement('script');\n        script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyAFp165fHH3fpXVJpV5eKV059_Ok95PLJg&libraries=places`;\n        script.defer = true;\n        script.async = true;\n\n        // Set up a callback function to resolve the promise when the script is loaded.\n        script.onload = resolve;\n        script.onerror = reject;\n\n        // Append the script to the document.\n        document.head.appendChild(script);\n      }\n    });\n  },\n\n  onMounted() {\n  this.loadGoogleMapsAPI()\n    .then(() => {\n      // The Google Maps API is loaded, and the 'google' object is now available.\n      // You can access 'google' and initialize your map or perform other actions here.\n\n      // Now you can fetch the user's location or perform other actions that depend on the Google Maps API.\n      fetchUserLocation();\n    })\n    .catch((error) => {\n      console.error('Error loading Google Maps API:', error);\n    });\n}\n},\n\nsetup() {\n     // Initialize center using localStorage or default values\n     const center = ref({\n      lat: 0, // Default to 0 for latitude\n      lng: 0, // Default to 0 for longitude\n    });\n\n\n    const desiredLocation = ref('');\n    const currentLocation = ref('');\n\n    const zoomLevel = ref(10);\n    const fetchUserLocation = () => {\n      if ('geolocation' in navigator) {\n        return new Promise((resolve, reject) => {\n          navigator.geolocation.getCurrentPosition(\n            (position) => {\n              const lat = position.coords.latitude;\n              const lng = position.coords.longitude;\n              const newCenter = { lat, lng };\n              zoomLevel.value = 20;\n             \n              resolve(newCenter);\n            },\n            (error) => {\n              reject(error);\n            }\n          );\n        });\n      } else {\n        console.error(\"Geolocation is not supported in this browser.\");\n        return null;\n      }\n    };\n\n    const onMarkerDragEnd = (event) => {\n      const newLocation = event.latLng;\n      center.value = newLocation;\n\n      // Save the new location to Local Storage\n      saveLocationToLocalStorage(newLocation);\n    };\n\n    const saveLocationToLocalStorage = (location) => {\n\n      const locationJSON = JSON.stringify(location);\n\n      localStorage.setItem('pinLocation', locationJSON);\n      \n    };\n\n    const returnToExactLocation = () => {\n      fetchUserLocation()\n        .then((newCenter) => {\n          center.value = newCenter;\n         \n          // Save the updated location to Local Storage\n          saveLocationToLocalStorage(center.value);\n        })\n        .catch((error) => {\n          console.error(\"Error getting user location: \" + error.message);\n        });\n    };\n\n    // onMounted(() => {\n    //   fetchUserLocation();\n      \n    // });\n    \n\n\n\n    // const onDesiredLocationChange = (place) => {\n    //   if (place.geometry && place.geometry.location) {\n    //     center.value = {\n    //       lat: place.geometry.location.lat(),\n    //       lng: place.geometry.location.lng(),\n    //     };\n    //   }\n    // };\n    const onDesiredLocationChange = () => {\n      // Use the Google Places Autocomplete service to search for locations\n      const input = this.$refs.locationInput;\n      const options = {\n        types: ['geocode'],\n      };\n      const autocomplete = new google.maps.places.Autocomplete(input, options);\n\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        if (place.geometry && place.geometry.location) {\n          center.value = {\n            lat: place.geometry.location.lat(),\n            lng: place.geometry.location.lng(),\n          };\n        }\n      });\n    };\n\n\n    // Function to handle current location change\n    const onCurrentLocationChange = (place) => {\n      if (place.geometry && place.geometry.location) {\n        center.value = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        };\n      }\n    };\n\n\n\n    return {\n      center,\n      zoomLevel,\n      returnToExactLocation,\n      onMarkerDragEnd,\n      onDesiredLocationChange,\n      desiredLocation,\n      currentLocation,\n      onCurrentLocationChange,\n    };\n\n\n  },\n\n  \n\n\n\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style> \n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}