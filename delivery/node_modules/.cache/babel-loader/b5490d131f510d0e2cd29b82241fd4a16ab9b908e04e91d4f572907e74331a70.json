{"ast":null,"code":"import { ref, onMounted } from 'vue';\nexport default {\n  name: 'App',\n  setup() {\n    // Initialize center using localStorage or default values\n    const center = ref({\n      lat: 0,\n      // Default to 0 for latitude\n      lng: 0 // Default to 0 for longitude\n    });\n\n    const zoomLevel = ref(10);\n    const fetchUserLocation = () => {\n      if ('geolocation' in navigator) {\n        return new Promise((resolve, reject) => {\n          navigator.geolocation.getCurrentPosition(position => {\n            const lat = position.coords.latitude;\n            const lng = position.coords.longitude;\n            const newCenter = {\n              lat,\n              lng\n            };\n            zoomLevel.value = 20;\n            resolve(newCenter);\n          }, error => {\n            reject(error);\n          });\n        });\n      } else {\n        console.error(\"Geolocation is not supported in this browser.\");\n        return null;\n      }\n    };\n    const onMarkerDragEnd = event => {\n      const newLocation = event.latLng;\n      center.value = newLocation;\n\n      // Save the new location to Local Storage\n      saveLocationToLocalStorage(newLocation);\n    };\n    const saveLocationToLocalStorage = location => {\n      const locationJSON = JSON.stringify(location);\n      localStorage.setItem('pinLocation', locationJSON);\n    };\n    const returnToExactLocation = () => {\n      fetchUserLocation().then(newCenter => {\n        center.value = newCenter;\n\n        // Save the updated location to Local Storage\n        saveLocationToLocalStorage(center.value);\n      }).catch(error => {\n        console.error(\"Error getting user location: \" + error.message);\n      });\n    };\n    onMounted(() => {\n      fetchUserLocation();\n    });\n    const onDesiredLocationChange = place => {\n      if (place.geometry && place.geometry.location) {\n        center.value = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng()\n        };\n      }\n    };\n\n    // Function to handle current location change\n    const onCurrentLocationChange = place => {\n      if (place.geometry && place.geometry.location) {\n        center.value = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng()\n        };\n      }\n    };\n    return {\n      center,\n      zoomLevel,\n      returnToExactLocation,\n      onMarkerDragEnd,\n      onDesiredLocationChange,\n      onCurrentLocationChange\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","name","setup","center","lat","lng","zoomLevel","fetchUserLocation","navigator","Promise","resolve","reject","geolocation","getCurrentPosition","position","coords","latitude","longitude","newCenter","value","error","console","onMarkerDragEnd","event","newLocation","latLng","saveLocationToLocalStorage","location","locationJSON","JSON","stringify","localStorage","setItem","returnToExactLocation","then","catch","message","onDesiredLocationChange","place","geometry","onCurrentLocationChange"],"sources":["/Users/nonnos/Desktop/projFinal/delivery/src/App.vue"],"sourcesContent":["<!-- <template>\n  <div>\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n  <HelloWorld msg=\"Welcome to Your Delivery App\"/>\n\n  <GMapMap\n      :center=\"center\"\n      :zoom=\"zoomLevel\"\n      map-type-id=\"terrain\"\n      style=\"width: 100vw; height: 20rem\"\n      :options=\"{\n        zoomControl: true,\n        mapTypeControl: true,\n        scaleControl: true,\n        streetViewControl: true,\n        rotateControl: true,\n        fullscreenControl: true\n      }\"\n    >\n    <GMapMarker\n        v-if=\"center.lat !== 0 && center.lng !== 0\"\n        :position=\"center\"\n        :draggable=\"true\"\n        :clickable=\"true\"\n        @dragend=\"onMarkerDragEnd\"\n      />\n\n      <button @click=\"returnToExactLocation\">Return to Exact Location</button>\n  </GMapMap>\n\n</div>\n\n</template>\n\n<script>\nimport HelloWorld from './components/HelloWorld.vue'\nimport { ref, onMounted } from 'vue';\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld,\n  },\n\n\nsetup() {\n     // Initialize center using localStorage or default values\n     const center = ref({\n      lat: 0, // Default to 0 for latitude\n      lng: 0, // Default to 0 for longitude\n    });\n\n\n    const zoomLevel = ref(10);\n    const fetchUserLocation = () => {\n      if ('geolocation' in navigator) {\n        return new Promise((resolve, reject) => {\n          navigator.geolocation.getCurrentPosition(\n            (position) => {\n              const lat = position.coords.latitude;\n              const lng = position.coords.longitude;\n              const newCenter = { lat, lng };\n              zoomLevel.value = 20;\n             \n              resolve(newCenter);\n            },\n            (error) => {\n              reject(error);\n            }\n          );\n        });\n      } else {\n        console.error(\"Geolocation is not supported in this browser.\");\n        return null;\n      }\n    };\n\n    const onMarkerDragEnd = (event) => {\n      const newLocation = event.latLng;\n      center.value = newLocation;\n\n      // Save the new location to Local Storage\n      saveLocationToLocalStorage(newLocation);\n    };\n\n    const saveLocationToLocalStorage = (location) => {\n\n      const locationJSON = JSON.stringify(location);\n\n      localStorage.setItem('pinLocation', locationJSON);\n      \n    };\n\n    const returnToExactLocation = () => {\n      fetchUserLocation()\n        .then((newCenter) => {\n          center.value = newCenter;\n         \n          // Save the updated location to Local Storage\n          saveLocationToLocalStorage(center.value);\n        })\n        .catch((error) => {\n          console.error(\"Error getting user location: \" + error.message);\n        });\n    };\n\n    onMounted(() => {\n      fetchUserLocation();\n      \n    });\n    const onDesiredLocationChange = (place) => {\n      if (place.geometry && place.geometry.location) {\n        center.value = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        };\n      }\n    };\n\n    // Function to handle current location change\n    const onCurrentLocationChange = (place) => {\n      if (place.geometry && place.geometry.location) {\n        center.value = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        };\n      }\n    };\n\n\n\n    return {\n      center,\n      zoomLevel,\n      returnToExactLocation,\n      onMarkerDragEnd,\n      onDesiredLocationChange,\n      onCurrentLocationChange,\n    };\n\n\n  },\n\n  \n\n\n\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style> -->\n\n\n<template>\n  <div>\n    <!-- Navbar -->\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a class=\"navbar-brand\" href=\"#\">Your Delivery App</a>\n    </nav>\n\n    <!-- Main Content Container -->\n    <div class=\"container mt-4\">\n      <div class=\"row\">\n        <!-- Map Section -->\n        <div class=\"col-md-12 col-lg-6 mb-4\">\n          <div class=\"card\">\n            <div class=\"card-body\">\n              <h5 class=\"card-title\">Delivery Map</h5>\n              <GMapMap\n                :center=\"center\"\n                :zoom=\"zoomLevel\"\n                map-type-id=\"terrain\"\n                style=\"width: 100%; height: 20rem\"\n              >\n                <GMapMarker\n                  v-if=\"center.lat !== 0 && center.lng !== 0\"\n                  :position=\"center\"\n                  :draggable=\"true\"\n                  :clickable=\"true\"\n                  @dragend=\"onMarkerDragEnd\"\n                />\n              </GMapMap>\n            </div>\n          </div>\n        </div>\n\n        <!-- Additional Information Section -->\n        <div class=\"col-md-12 col-lg-6 mb-4\">\n          <div class=\"card\">\n            <div class=\"card-body\">\n              <h5 class=\"card-title\">Additional Information</h5>\n              <!-- Other content goes here, e.g., form elements, details, etc. -->\n              <button @click=\"returnToExactLocation\" class=\"btn btn-primary\">\n                Return to Exact Location\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\n\nexport default {\n  name: 'App',\n\n  \nsetup() {\n     // Initialize center using localStorage or default values\n     const center = ref({\n      lat: 0, // Default to 0 for latitude\n      lng: 0, // Default to 0 for longitude\n    });\n\n\n    const zoomLevel = ref(10);\n    const fetchUserLocation = () => {\n      if ('geolocation' in navigator) {\n        return new Promise((resolve, reject) => {\n          navigator.geolocation.getCurrentPosition(\n            (position) => {\n              const lat = position.coords.latitude;\n              const lng = position.coords.longitude;\n              const newCenter = { lat, lng };\n              zoomLevel.value = 20;\n             \n              resolve(newCenter);\n            },\n            (error) => {\n              reject(error);\n            }\n          );\n        });\n      } else {\n        console.error(\"Geolocation is not supported in this browser.\");\n        return null;\n      }\n    };\n\n    const onMarkerDragEnd = (event) => {\n      const newLocation = event.latLng;\n      center.value = newLocation;\n\n      // Save the new location to Local Storage\n      saveLocationToLocalStorage(newLocation);\n    };\n\n    const saveLocationToLocalStorage = (location) => {\n\n      const locationJSON = JSON.stringify(location);\n\n      localStorage.setItem('pinLocation', locationJSON);\n      \n    };\n\n    const returnToExactLocation = () => {\n      fetchUserLocation()\n        .then((newCenter) => {\n          center.value = newCenter;\n         \n          // Save the updated location to Local Storage\n          saveLocationToLocalStorage(center.value);\n        })\n        .catch((error) => {\n          console.error(\"Error getting user location: \" + error.message);\n        });\n    };\n\n    onMounted(() => {\n      fetchUserLocation();\n      \n    });\n    const onDesiredLocationChange = (place) => {\n      if (place.geometry && place.geometry.location) {\n        center.value = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        };\n      }\n    };\n\n    // Function to handle current location change\n    const onCurrentLocationChange = (place) => {\n      if (place.geometry && place.geometry.location) {\n        center.value = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        };\n      }\n    };\n\n\n\n    return {\n      center,\n      zoomLevel,\n      returnToExactLocation,\n      onMarkerDragEnd,\n      onDesiredLocationChange,\n      onCurrentLocationChange,\n    };\n\n\n  },\n\n  \n\n\n\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}